/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/fantasy/Documents/DroneCode/src/modules/uavcan/libuavcan/dsdl/uavcan/equipment/laser/2304.TF02data.uavcan
 */

#ifndef UAVCAN_EQUIPMENT_LASER_TF02DATA_HPP_INCLUDED
#define UAVCAN_EQUIPMENT_LASER_TF02DATA_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
uint8 distanceH
uint8 distanceL
uint8 ampH
uint8 ampL
uint8 tim
uint8 sig
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.laser.TF02data
saturated uint8 distanceH
saturated uint8 distanceL
saturated uint8 ampH
saturated uint8 ampL
saturated uint8 tim
saturated uint8 sig
******************************************************************************/

#undef distanceH
#undef distanceL
#undef ampH
#undef ampL
#undef tim
#undef sig

namespace uavcan
{
namespace equipment
{
namespace laser
{

template <int _tmpl>
struct UAVCAN_EXPORT TF02data_
{
    typedef const TF02data_<_tmpl>& ParameterType;
    typedef TF02data_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > distanceH;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > distanceL;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ampH;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ampL;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > tim;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > sig;
    };

    enum
    {
        MinBitLen
            = FieldTypes::distanceH::MinBitLen
            + FieldTypes::distanceL::MinBitLen
            + FieldTypes::ampH::MinBitLen
            + FieldTypes::ampL::MinBitLen
            + FieldTypes::tim::MinBitLen
            + FieldTypes::sig::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::distanceH::MaxBitLen
            + FieldTypes::distanceL::MaxBitLen
            + FieldTypes::ampH::MaxBitLen
            + FieldTypes::ampL::MaxBitLen
            + FieldTypes::tim::MaxBitLen
            + FieldTypes::sig::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::distanceH >::Type distanceH;
    typename ::uavcan::StorageType< typename FieldTypes::distanceL >::Type distanceL;
    typename ::uavcan::StorageType< typename FieldTypes::ampH >::Type ampH;
    typename ::uavcan::StorageType< typename FieldTypes::ampL >::Type ampL;
    typename ::uavcan::StorageType< typename FieldTypes::tim >::Type tim;
    typename ::uavcan::StorageType< typename FieldTypes::sig >::Type sig;

    TF02data_()
        : distanceH()
        , distanceL()
        , ampH()
        , ampL()
        , tim()
        , sig()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<48 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2304 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.laser.TF02data";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool TF02data_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        distanceH == rhs.distanceH &&
        distanceL == rhs.distanceL &&
        ampH == rhs.ampH &&
        ampL == rhs.ampL &&
        tim == rhs.tim &&
        sig == rhs.sig;
}

template <int _tmpl>
bool TF02data_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(distanceH, rhs.distanceH) &&
        ::uavcan::areClose(distanceL, rhs.distanceL) &&
        ::uavcan::areClose(ampH, rhs.ampH) &&
        ::uavcan::areClose(ampL, rhs.ampL) &&
        ::uavcan::areClose(tim, rhs.tim) &&
        ::uavcan::areClose(sig, rhs.sig);
}

template <int _tmpl>
int TF02data_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::distanceH::encode(self.distanceH, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::distanceL::encode(self.distanceL, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ampH::encode(self.ampH, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ampL::encode(self.ampL, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tim::encode(self.tim, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sig::encode(self.sig, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int TF02data_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::distanceH::decode(self.distanceH, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::distanceL::decode(self.distanceL, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ampH::decode(self.ampH, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::ampL::decode(self.ampL, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::tim::decode(self.tim, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::sig::decode(self.sig, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature TF02data_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xBD3704A485CFB9B9ULL);

    FieldTypes::distanceH::extendDataTypeSignature(signature);
    FieldTypes::distanceL::extendDataTypeSignature(signature);
    FieldTypes::ampH::extendDataTypeSignature(signature);
    FieldTypes::ampL::extendDataTypeSignature(signature);
    FieldTypes::tim::extendDataTypeSignature(signature);
    FieldTypes::sig::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef TF02data_<0> TF02data;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::laser::TF02data > _uavcan_gdtr_registrator_TF02data;

}

} // Namespace laser
} // Namespace equipment
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::laser::TF02data >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::laser::TF02data::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::laser::TF02data >::stream(Stream& s, ::uavcan::equipment::laser::TF02data::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "distanceH: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::distanceH >::stream(s, obj.distanceH, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "distanceL: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::distanceL >::stream(s, obj.distanceL, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ampH: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::ampH >::stream(s, obj.ampH, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "ampL: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::ampL >::stream(s, obj.ampL, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "tim: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::tim >::stream(s, obj.tim, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "sig: ";
    YamlStreamer< ::uavcan::equipment::laser::TF02data::FieldTypes::sig >::stream(s, obj.sig, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace laser
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::laser::TF02data::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::laser::TF02data >::stream(s, obj, 0);
    return s;
}

} // Namespace laser
} // Namespace equipment
} // Namespace uavcan

#endif // UAVCAN_EQUIPMENT_LASER_TF02DATA_HPP_INCLUDED